파일 업로드, 스프링 부트에서 도구가 탑재 되어서,
application.properties 에서 관련 설정만 하면됨.
예)
#파일 업로드 관련 설정.
# 관리자가 관리하는 상품, 여행지, 카페메뉴, 동물사진, static 하위에 이미지 폴더
spring.servlet.multipart.enabled=true
# 프로젝트시, 사용자가 업로드한 경로
spring.servlet.multipart.location=c:\\upload\\springTest
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=100MB

2) 실제 C 드라이브에 폴더 만들기.

3) 스웨거에서 멀티파트 타입으로 파일 업로드 하는 UI 파일 선택 부분이
보이지 않는 오류가 있어서 -> 포스트 맨으로 교체.

4) 포스트맨에서.
이미지, 파일을 업로드시,
body -> form-date -> key : file(or files) -> 값 : text -> file 변경해서 선택하기.

5) 파일명 이름 중복 안하기 정책.
UUID -> 16자리 랜덤한 문자열을 생성해서,
업로드 파일명 중복 방지.
UUID(16자리)+"_"+파일명

6)썸네일, 손톱 크기 만큼 비유.
작은 이미지로 변환하고,
목록에서는 썸네일 이미지 사용하고,
상세화면에서는 원본 이미지 이용하기.
도구 설치.

7) 이미지 처리 개요.
- 물리 저장소(로컬) -> aws , bucket
- 업로드 이미지 경로 : c:\\upload\\springTest

- 데이터베이스에는 이미지 파일명이 저장.

, 이미지 파일명만 알고 있으면, 그 이름으로 서버에 호출해서 이미지 다운로드
화면에 출력하기.

======================================================================
@OneToMany
예) 게시글 1 : 댓글 N,
자바 버전에서는 방향성이 있다.
주체에따라서, 연관관계 설정이 달라진다.

댓글 입장에서 , @ManyToOne
기존의 데이터베이스 FK 를 설정하는 것과 동일함.
단방향으로 만 설정이 되어 있음.

게시글 1: 첨부 이미지들 : N
상위 엔티티 기준으로 연관관계를 설정.
게시글 입장, @OneToMany

장점.
- 상위에서 영속성(1차 캐시테이블), 게시글 삭제시, 하위 이미지들이 같이 삭제되거나,
- 위에서 아래 방향으로 작업이 조금 더 익숙하다.
- 분리해서 작업을 할수 있어서, 부가적인 설정하기가 편하다.
cascade 설정, 고아 객체 처리, N+1, 최적화등.

단점.
양방향으로 연관관계 설정에 대한 기초 지식이 필요함.


확인사항,
양방향이 됨.
게시글 입장 : @OneToMany
이미지들 입장 : @ManyToOne
게시글 1: 이미지들 N

JPA, 중간 테이블을 만들어줌.


연관관계 주인 설정.
자바, 데이터베이스와 다르게, 방향이 있어요.
누가 주체적으로 일을 할거냐?
mappedBy

메모,
만약, 중간 테이블을 이용하지 않고 설정하는 방법
- @OneToMany 부분에서, @JoinColumn 설정
- mappedBy 설정을 하면됨.

영속성 상태 관련 내용
- PERSIST, REMOVE : 상위 엔티티가 처리될때(영속되다) 하위 엔티티도 처리가 됨.
- MERGE, REFRESH, DETACH : 상위 엔티티가 처리될때(영속되다) 하위 엔티티도 상태가 변경.
- ALL : 상위 엔티티가 처리될때(영속되다) 하위 엔티티도 적용이 됨

1차 캐시 테이블 , 실제 테이블 , 동기화 놀이


지연로딩 ->
보드, 보드의 이미지들이  join 처리가 되어 있음.
1: N , 양방향,

지연로딩을 하더래도, 한 번에 조인을 처리해서 select가 이루어 지는 설정.
@EntityGraph


N+1 문제 발생,
1 : board 관련 select 조회,
N : 하나의 board 에대한, 각각 boardImage 들 또 select 함.

: 모아서 처리 해줄게. IN 연산자를 이용해서, 한번에 지정한 갯수만큼씩만
조회를 할게, 매번 귀찮게 안할게.

해결책
@BatchSize , 어노테이션 이용해서,
데이터베이스를 매번 실행해서, 많이 사용함. 자원 소모 심함.
지정한 크기만큼만 쿼리를 모아서 한번에 실행하기.















